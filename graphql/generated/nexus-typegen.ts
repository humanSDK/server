/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../context"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    DateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    DateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AWSIntegrationInput: { // input type
    accessKeyId?: string | null; // String
    region?: string | null; // String
    secretAccessKey?: string | null; // String
  }
  SortInput: { // input type
    field_name?: string | null; // String
    order?: NexusGenEnums['SortOrder'] | null; // SortOrder
  }
}

export interface NexusGenEnums {
  CloudProvider: "AWS" | "AZURE" | "GCP"
  Role: "Admin" | "User"
  SortOrder: "ASC" | "DESC"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
}

export interface NexusGenObjects {
  CloudIntegration: { // root type
    awsId?: string | null; // String
    azureId?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    gcpId?: string | null; // String
    id: string; // ID!
    provider: NexusGenEnums['CloudProvider']; // CloudProvider!
    userId: string; // String!
  }
  GitHubRepository: { // root type
    description?: string | null; // String
    forks: number; // Int!
    fullName: string; // String!
    id: number; // Int!
    name: string; // String!
    private: boolean; // Boolean!
    pushedAt: string; // String!
    stars: number; // Int!
    url: string; // String!
  }
  Integration: { // root type
    accessToken: string; // String!
    connectedAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    provider: string; // String!
    providerUserId: string; // String!
    userId: string; // String!
  }
  Mutation: {};
  Query: {};
  RepositoryResponse: { // root type
    message?: string | null; // String
    repositories?: Array<NexusGenRootTypes['GitHubRepository'] | null> | null; // [GitHubRepository]
    status: string; // String!
  }
  User: { // root type
    avatar?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    isActive: boolean; // Boolean!
    isVerified: boolean; // Boolean!
    lastLoginAt?: NexusGenScalars['DateTime'] | null; // DateTime
    lastLogoutAt?: NexusGenScalars['DateTime'] | null; // DateTime
    name?: string | null; // String
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  CloudIntegration: { // field return type
    awsId: string | null; // String
    azureId: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    gcpId: string | null; // String
    id: string; // ID!
    provider: NexusGenEnums['CloudProvider']; // CloudProvider!
    userId: string; // String!
  }
  GitHubRepository: { // field return type
    description: string | null; // String
    forks: number; // Int!
    fullName: string; // String!
    id: number; // Int!
    name: string; // String!
    private: boolean; // Boolean!
    pushedAt: string; // String!
    stars: number; // Int!
    url: string; // String!
  }
  Integration: { // field return type
    accessToken: string; // String!
    connectedAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // ID!
    provider: string; // String!
    providerUserId: string; // String!
    userId: string; // String!
  }
  Mutation: { // field return type
    createCloudIntegration: NexusGenRootTypes['CloudIntegration'] | null; // CloudIntegration
    createUser: NexusGenRootTypes['User'] | null; // User
  }
  Query: { // field return type
    getCloudIntegrations: Array<NexusGenRootTypes['CloudIntegration'] | null> | null; // [CloudIntegration]
    getRepositories: NexusGenRootTypes['RepositoryResponse'] | null; // RepositoryResponse
    getUser: NexusGenRootTypes['User'] | null; // User
  }
  RepositoryResponse: { // field return type
    message: string | null; // String
    repositories: Array<NexusGenRootTypes['GitHubRepository'] | null> | null; // [GitHubRepository]
    status: string; // String!
  }
  User: { // field return type
    avatar: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // ID!
    isActive: boolean; // Boolean!
    isVerified: boolean; // Boolean!
    lastLoginAt: NexusGenScalars['DateTime'] | null; // DateTime
    lastLogoutAt: NexusGenScalars['DateTime'] | null; // DateTime
    name: string | null; // String
    role: NexusGenEnums['Role']; // Role!
  }
}

export interface NexusGenFieldTypeNames {
  CloudIntegration: { // field return type name
    awsId: 'String'
    azureId: 'String'
    createdAt: 'DateTime'
    gcpId: 'String'
    id: 'ID'
    provider: 'CloudProvider'
    userId: 'String'
  }
  GitHubRepository: { // field return type name
    description: 'String'
    forks: 'Int'
    fullName: 'String'
    id: 'Int'
    name: 'String'
    private: 'Boolean'
    pushedAt: 'String'
    stars: 'Int'
    url: 'String'
  }
  Integration: { // field return type name
    accessToken: 'String'
    connectedAt: 'DateTime'
    id: 'ID'
    provider: 'String'
    providerUserId: 'String'
    userId: 'String'
  }
  Mutation: { // field return type name
    createCloudIntegration: 'CloudIntegration'
    createUser: 'User'
  }
  Query: { // field return type name
    getCloudIntegrations: 'CloudIntegration'
    getRepositories: 'RepositoryResponse'
    getUser: 'User'
  }
  RepositoryResponse: { // field return type name
    message: 'String'
    repositories: 'GitHubRepository'
    status: 'String'
  }
  User: { // field return type name
    avatar: 'String'
    createdAt: 'DateTime'
    email: 'String'
    id: 'ID'
    isActive: 'Boolean'
    isVerified: 'Boolean'
    lastLoginAt: 'DateTime'
    lastLogoutAt: 'DateTime'
    name: 'String'
    role: 'Role'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createCloudIntegration: { // args
      aws?: NexusGenInputs['AWSIntegrationInput'] | null; // AWSIntegrationInput
      provider: NexusGenEnums['CloudProvider']; // CloudProvider!
    }
    createUser: { // args
      email: string; // String!
      name: string; // String!
      password: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}