generator client {
  provider = "prisma-client-js"
}

generator nexusPrisma {
  provider = "nexus-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


enum Role {
  Admin
  User
}

model User {
  id             String   @id @default(uuid())
  email          String   @unique
  name           String?
  avatar         String?
  hashedPassword String?
  createdAt      DateTime @default(now())

  role           Role     @default(User)

  isVerified     Boolean  @default(false)
  verifyToken    String?  @db.Text

  isActive       Boolean  @default(false)
  lastLoginAt    DateTime?
  lastLogoutAt   DateTime?

  utmSource      String?
  
  integrations   Integration[]
  cloudIntegration   CloudIntegration[] 
}



model Integration {
  id             String   @id @default(uuid())
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  provider       String   
  accessToken    String   @db.Text
  providerUserId String  
  connectedAt    DateTime @default(now())

  @@unique([userId, provider], name: "userId_provider")
}


enum CloudProvider {
  AWS
  GCP
  AZURE
}

model CloudIntegration {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String

  provider  CloudProvider

  aws       AWSIntegration? @relation(fields: [awsId], references: [id], onDelete: Cascade)
  awsId     String?          @unique

  gcp       GCPIntegration? @relation(fields: [gcpId], references: [id], onDelete: Cascade)
  gcpId     String?          @unique

  azure     AzureIntegration? @relation(fields: [azureId], references: [id], onDelete: Cascade)
  azureId   String?            @unique

  createdAt DateTime @default(now())
}

model AWSIntegration {
  id             String   @id @default(uuid())
  accessKeyId    String
  secretAccessKey String  @db.Text
  region         String
  cloudIntegration CloudIntegration?
}

model GCPIntegration {
  id             String   @id @default(uuid())
  serviceAccountJson String @db.Text
  projectId       String
  cloudIntegration CloudIntegration?
}

model AzureIntegration {
  id             String   @id @default(uuid())
  tenantId       String
  clientId       String
  clientSecret   String @db.Text
  subscriptionId String
  cloudIntegration CloudIntegration?
}
